<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="272" failures="1" errors="0" time="17.611">
  <testsuite name="ReviewService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.602" tests="12">
    <testcase classname="ReviewService" name="should be defined" time="0.041">
    </testcase>
    <testcase classname="ReviewService &gt; create" name="should create a new review" time="0.007">
    </testcase>
    <testcase classname="ReviewService &gt; findAll" name="should return all reviews when no filter is provided" time="0.005">
    </testcase>
    <testcase classname="ReviewService &gt; findOne" name="should return a single review" time="0.005">
    </testcase>
    <testcase classname="ReviewService &gt; findOne" name="should throw NotFoundException when review not found" time="0.046">
    </testcase>
    <testcase classname="ReviewService &gt; update" name="should update a review" time="0.003">
    </testcase>
    <testcase classname="ReviewService &gt; update" name="should throw NotFoundException when updating non-existent review" time="0.007">
    </testcase>
    <testcase classname="ReviewService &gt; remove" name="should remove a review" time="0.005">
    </testcase>
    <testcase classname="ReviewService &gt; remove" name="should throw NotFoundException when removing non-existent review" time="0.007">
    </testcase>
    <testcase classname="ReviewService &gt; assignReviewToOrder" name="should assign a review to an order" time="0.005">
    </testcase>
    <testcase classname="ReviewService &gt; assignReviewToOrder" name="should throw NotFoundException when review not found" time="0.004">
    </testcase>
    <testcase classname="ReviewService &gt; assignReviewToOrder" name="should throw NotFoundException when order not found" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="CartItemService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.783" tests="21">
    <testcase classname="CartItemService" name="should be defined" time="0.039">
    </testcase>
    <testcase classname="CartItemService &gt; create" name="should create a cart item" time="0.012">
    </testcase>
    <testcase classname="CartItemService &gt; create" name="should throw NotFoundException if cart not found" time="0.05">
    </testcase>
    <testcase classname="CartItemService &gt; create" name="should throw NotFoundException if candle not found" time="0.005">
    </testcase>
    <testcase classname="CartItemService &gt; create" name="should throw NotFoundException if gift not found" time="0.007">
    </testcase>
    <testcase classname="CartItemService &gt; findAll" name="should return an array of cart items" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; findOne" name="should return a cart item" time="0.005">
    </testcase>
    <testcase classname="CartItemService &gt; findOne" name="should throw NotFoundException if cart item not found" time="0.005">
    </testcase>
    <testcase classname="CartItemService &gt; update" name="should update a cart item" time="0.007">
    </testcase>
    <testcase classname="CartItemService &gt; update" name="should throw NotFoundException if cart item not found" time="0.006">
    </testcase>
    <testcase classname="CartItemService &gt; remove" name="should remove a cart item" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; remove" name="should throw NotFoundException if cart item not found" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; assignCandle" name="should assign a candle to a cart item" time="0.009">
    </testcase>
    <testcase classname="CartItemService &gt; assignCandle" name="should throw NotFoundException if cart item not found" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; assignCandle" name="should throw NotFoundException if candle not found" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; assignGift" name="should assign a gift to a cart item" time="0.005">
    </testcase>
    <testcase classname="CartItemService &gt; assignGift" name="should throw NotFoundException if cart item not found" time="0.008">
    </testcase>
    <testcase classname="CartItemService &gt; assignGift" name="should throw NotFoundException if gift not found" time="0.008">
    </testcase>
    <testcase classname="CartItemService &gt; assignCart" name="should assign a cart to a cart item" time="0.004">
    </testcase>
    <testcase classname="CartItemService &gt; assignCart" name="should throw NotFoundException if cart item not found" time="0.003">
    </testcase>
    <testcase classname="CartItemService &gt; assignCart" name="should throw NotFoundException if cart not found" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="CandlesService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.773" tests="12">
    <testcase classname="CandlesService" name="should be defined" time="0.044">
    </testcase>
    <testcase classname="CandlesService &gt; createCandle" name="should create a new candle" time="0.009">
    </testcase>
    <testcase classname="CandlesService &gt; createCandle" name="should throw NotFoundException if container not found" time="0.045">
    </testcase>
    <testcase classname="CandlesService &gt; createCandle" name="should throw NotFoundException if aroma not found" time="0.007">
    </testcase>
    <testcase classname="CandlesService &gt; findAll" name="should return an array of candles" time="0.006">
    </testcase>
    <testcase classname="CandlesService &gt; findAll" name="should throw NotFoundException if no candles found" time="0.005">
    </testcase>
    <testcase classname="CandlesService &gt; findOne" name="should return a single candle" time="0.004">
    </testcase>
    <testcase classname="CandlesService &gt; findOne" name="should throw error when candle not found" time="0.005">
    </testcase>
    <testcase classname="CandlesService &gt; update" name="should throw NotFoundException if candle not found for update" time="0.007">
    </testcase>
    <testcase classname="CandlesService &gt; remove" name="should remove a candle" time="0.004">
    </testcase>
    <testcase classname="CandlesService &gt; remove" name="should throw NotFoundException if candle not found" time="0.004">
    </testcase>
    <testcase classname="CandlesService &gt; getGifts" name="should return an array of gifts" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="OrdersService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.876" tests="24">
    <testcase classname="OrdersService &gt; createOrder" name="should create and return an order" time="0.052">
    </testcase>
    <testcase classname="OrdersService &gt; createOrder" name="should throw BadRequestException if order data is invalid" time="0.045">
    </testcase>
    <testcase classname="OrdersService &gt; findAll" name="should return a list of orders" time="0.006">
    </testcase>
    <testcase classname="OrdersService &gt; findAll" name="should throw if no orders found" time="0.013">
    </testcase>
    <testcase classname="OrdersService &gt; findOne" name="should return an order by id" time="0.01">
    </testcase>
    <testcase classname="OrdersService &gt; findOne" name="should throw if order not found" time="0.004">
    </testcase>
    <testcase classname="OrdersService &gt; update" name="should update and return the order" time="0.004">
    </testcase>
    <testcase classname="OrdersService &gt; update" name="should throw if order does not exist" time="0.006">
    </testcase>
    <testcase classname="OrdersService &gt; update" name="should throw if update data is invalid" time="0.008">
    </testcase>
    <testcase classname="OrdersService &gt; remove" name="should delete an order" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; remove" name="should throw if order not found" time="0.005">
    </testcase>
    <testcase classname="OrdersService &gt; updateStatus" name="should update status of the order" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; updateStatus" name="should throw if order not found" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; updateStatus" name="should throw if status is invalid" time="0.004">
    </testcase>
    <testcase classname="OrdersService &gt; calculateTotalAmount" name="should calculate total price of candles" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; calculateTotalAmount" name="should return 0 for empty candle array" time="0.002">
    </testcase>
    <testcase classname="OrdersService &gt; calculateTotalAmount" name="should handle candles with zero price" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; processPayment" name="should update payment details and status" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; processPayment" name="should throw if order not found" time="0.004">
    </testcase>
    <testcase classname="OrdersService &gt; processPayment" name="should throw if payment details are invalid" time="0.004">
    </testcase>
    <testcase classname="OrdersService &gt; assignUserToOrder" name="should assign user to order and return updated order" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; assignUserToOrder" name="should throw if order not found" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; assignUserToOrder" name="should throw if user not found" time="0.003">
    </testcase>
    <testcase classname="OrdersService &gt; assignUserToOrder" name="should throw if user is already assigned" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="AromasService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.906" tests="9">
    <testcase classname="AromasService" name="should be defined" time="0.046">
    </testcase>
    <testcase classname="AromasService &gt; create" name="should create a new aroma" time="0.009">
    </testcase>
    <testcase classname="AromasService &gt; findAll" name="should return an array of aromas" time="0.006">
    </testcase>
    <testcase classname="AromasService &gt; findOne" name="should return a single aroma" time="0.005">
    </testcase>
    <testcase classname="AromasService &gt; findOne" name="should throw NotFoundException when aroma not found" time="0.051">
    </testcase>
    <testcase classname="AromasService &gt; update" name="should update an aroma" time="0.004">
    </testcase>
    <testcase classname="AromasService &gt; update" name="should throw NotFoundException when updating non-existent aroma" time="0.004">
    </testcase>
    <testcase classname="AromasService &gt; remove" name="should remove an aroma" time="0.003">
    </testcase>
    <testcase classname="AromasService &gt; remove" name="should throw NotFoundException when removing non-existent aroma" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="IntendedImpactService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="12.899" tests="8">
    <testcase classname="IntendedImpactService" name="should be defined" time="0.057">
    </testcase>
    <testcase classname="IntendedImpactService &gt; create" name="should create and return an intended impact" time="0.009">
    </testcase>
    <testcase classname="IntendedImpactService &gt; findAll" name="should return all intended impacts" time="0.006">
    </testcase>
    <testcase classname="IntendedImpactService &gt; findAll" name="should throw if no intended impacts found" time="0.025">
    </testcase>
    <testcase classname="IntendedImpactService &gt; findOne" name="should return one intended impact" time="0.007">
    </testcase>
    <testcase classname="IntendedImpactService &gt; findOne" name="should throw if intended impact not found" time="0.004">
    </testcase>
    <testcase classname="IntendedImpactService &gt; update" name="should update and return the intended impact" time="0.005">
    </testcase>
    <testcase classname="IntendedImpactService &gt; remove" name="should delete the intended impact" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="CartService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.065" tests="15">
    <testcase classname="CartService" name="should be defined" time="0.05">
    </testcase>
    <testcase classname="CartService &gt; create" name="should create and save a cart" time="0.008">
    </testcase>
    <testcase classname="CartService &gt; create" name="should throw if user not found" time="0.027">
    </testcase>
    <testcase classname="CartService &gt; findOne" name="should return a cart if found" time="0.004">
    </testcase>
    <testcase classname="CartService &gt; findOne" name="should throw if not found" time="0.028">
    </testcase>
    <testcase classname="CartService &gt; update" name="should update and save a cart" time="0.012">
    </testcase>
    <testcase classname="CartService &gt; update" name="should throw if not found" time="0.004">
    </testcase>
    <testcase classname="CartService &gt; remove" name="should delete a cart if found" time="0.004">
    </testcase>
    <testcase classname="CartService &gt; remove" name="should throw if not found" time="0.007">
    </testcase>
    <testcase classname="CartService &gt; addItem" name="should add an item to a cart" time="0.004">
    </testcase>
    <testcase classname="CartService &gt; addItem" name="should throw if cart not found" time="0.004">
    </testcase>
    <testcase classname="CartService &gt; updateItem" name="should update a cart item" time="0.005">
    </testcase>
    <testcase classname="CartService &gt; updateItem" name="should throw if cart item not found" time="0.003">
    </testcase>
    <testcase classname="CartService &gt; removeItem" name="should remove a cart item" time="0.003">
    </testcase>
    <testcase classname="CartService &gt; removeItem" name="should throw if cart item not found" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="OrderItemService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.025" tests="16">
    <testcase classname="OrderItemService" name="should be defined" time="0.05">
    </testcase>
    <testcase classname="OrderItemService &gt; create" name="should create an order item" time="0.008">
    </testcase>
    <testcase classname="OrderItemService &gt; create" name="should throw if order not found" time="0.049">
    </testcase>
    <testcase classname="OrderItemService &gt; findAll" name="should return an array of order items" time="0.004">
    </testcase>
    <testcase classname="OrderItemService &gt; findOne" name="should return an order item" time="0.007">
    </testcase>
    <testcase classname="OrderItemService &gt; findOne" name="should throw if order item not found" time="0.007">
    </testcase>
    <testcase classname="OrderItemService &gt; update" name="should update an order item" time="0.007">
    </testcase>
    <testcase classname="OrderItemService &gt; update" name="should throw if order item not found" time="0.013">
    </testcase>
    <testcase classname="OrderItemService &gt; remove" name="should remove an order item" time="0.008">
    </testcase>
    <testcase classname="OrderItemService &gt; remove" name="should throw if order item not found" time="0.005">
    </testcase>
    <testcase classname="OrderItemService &gt; assignCandle" name="should assign a candle to an order item" time="0.003">
    </testcase>
    <testcase classname="OrderItemService &gt; assignCandle" name="should throw if order item not found" time="0.005">
    </testcase>
    <testcase classname="OrderItemService &gt; assignGift" name="should assign a gift to an order item" time="0.006">
    </testcase>
    <testcase classname="OrderItemService &gt; assignGift" name="should throw if order item not found" time="0.004">
    </testcase>
    <testcase classname="OrderItemService &gt; assignOrder" name="should assign an order to an order item" time="0.004">
    </testcase>
    <testcase classname="OrderItemService &gt; assignOrder" name="should throw if order item not found" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AiController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.103" tests="3">
    <testcase classname="AiController" name="should be defined" time="0.054">
    </testcase>
    <testcase classname="AiController &gt; generateText" name="should call service.generateText with the prompt" time="0.01">
    </testcase>
    <testcase classname="AiController &gt; generate" name="should call service.generateImage with the prompt" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="GiftsService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.048" tests="9">
    <testcase classname="GiftsService" name="should be defined" time="0.05">
    </testcase>
    <testcase classname="GiftsService &gt; create" name="should create a new gift" time="0.007">
    </testcase>
    <testcase classname="GiftsService &gt; findAll" name="should return an array of gifts" time="0.006">
    </testcase>
    <testcase classname="GiftsService &gt; findAll" name="should throw NotFoundException if no gifts are found" time="0.047">
    </testcase>
    <testcase classname="GiftsService &gt; findOne" name="should return a single gift" time="0.008">
    </testcase>
    <testcase classname="GiftsService &gt; findOne" name="should throw NotFoundException if gift is not found" time="0.005">
    </testcase>
    <testcase classname="GiftsService &gt; update" name="should update a gift" time="0.005">
    </testcase>
    <testcase classname="GiftsService &gt; update" name="should throw NotFoundException if gift is not found" time="0.007">
    </testcase>
    <testcase classname="GiftsService &gt; remove" name="should delete a gift" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="MainOptionsService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.027" tests="10">
    <testcase classname="MainOptionsService" name="should create a MainOption" time="0.046">
    </testcase>
    <testcase classname="MainOptionsService" name="should throw InternalServerErrorException on failed save" time="0.022">
    </testcase>
    <testcase classname="MainOptionsService" name="should return all main options" time="0.003">
    </testcase>
    <testcase classname="MainOptionsService" name="should throw NotFoundException when no main options found" time="0.007">
    </testcase>
    <testcase classname="MainOptionsService" name="should find one main option" time="0.015">
    </testcase>
    <testcase classname="MainOptionsService" name="should throw NotFoundException when main option not found" time="0.003">
    </testcase>
    <testcase classname="MainOptionsService" name="should update a main option" time="0.004">
    </testcase>
    <testcase classname="MainOptionsService" name="should throw NotFoundException when updating non-existent option" time="0.005">
    </testcase>
    <testcase classname="MainOptionsService" name="should remove a main option" time="0.005">
    </testcase>
    <testcase classname="MainOptionsService" name="should throw NotFoundException when removing non-existent option" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ReviewController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.175" tests="6">
    <testcase classname="ReviewController" name="should be defined" time="0.045">
    </testcase>
    <testcase classname="ReviewController &gt; findAll" name="should return an array of reviews" time="0.007">
    </testcase>
    <testcase classname="ReviewController &gt; findOne" name="should return a review" time="0.006">
    </testcase>
    <testcase classname="ReviewController &gt; create" name="should create a review" time="0.005">
    </testcase>
    <testcase classname="ReviewController &gt; update" name="should update a review" time="0.009">
    </testcase>
    <testcase classname="ReviewController &gt; remove" name="should remove a review" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.551" tests="7">
    <testcase classname="AuthService" name="should be defined" time="0.048">
    </testcase>
    <testcase classname="AuthService &gt; createUser" name="should create a new user" time="0.093">
    </testcase>
    <testcase classname="AuthService &gt; createUser" name="should throw error when user creation fails" time="0.132">
    </testcase>
    <testcase classname="AuthService &gt; createUser" name="should throw ConflictException when email already exists" time="0.009">
    </testcase>
    <testcase classname="AuthService &gt; loginUser" name="should login user with valid credentials" time="0.096">
    </testcase>
    <testcase classname="AuthService &gt; loginUser" name="should throw UnauthorizedException with invalid email" time="0.005">
    </testcase>
    <testcase classname="AuthService &gt; loginUser" name="should throw UnauthorizedException with invalid password" time="0.084">
    </testcase>
  </testsuite>
  <testsuite name="CartItemController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.872" tests="15">
    <testcase classname="CartItemController" name="should be defined" time="0.054">
    </testcase>
    <testcase classname="CartItemController &gt; create" name="should create a cart item" time="0.016">
    </testcase>
    <testcase classname="CartItemController &gt; findAll" name="should return an array of cart items" time="0.007">
    </testcase>
    <testcase classname="CartItemController &gt; findOne" name="should return a cart item" time="0.006">
    </testcase>
    <testcase classname="CartItemController &gt; findOne" name="should throw if cart item not found" time="0.034">
    </testcase>
    <testcase classname="CartItemController &gt; update" name="should update a cart item" time="0.007">
    </testcase>
    <testcase classname="CartItemController &gt; update" name="should throw if cart item not found" time="0.006">
    </testcase>
    <testcase classname="CartItemController &gt; remove" name="should remove a cart item" time="0.008">
    </testcase>
    <testcase classname="CartItemController &gt; remove" name="should throw if cart item not found" time="0.009">
    </testcase>
    <testcase classname="CartItemController &gt; assignCandle" name="should assign a candle to a cart item" time="0.006">
    </testcase>
    <testcase classname="CartItemController &gt; assignCandle" name="should throw if cart item not found" time="0.008">
    </testcase>
    <testcase classname="CartItemController &gt; assignGift" name="should assign a gift to a cart item" time="0.005">
    </testcase>
    <testcase classname="CartItemController &gt; assignGift" name="should throw if cart item not found" time="0.006">
    </testcase>
    <testcase classname="CartItemController &gt; assignCart" name="should assign a cart to a cart item" time="0.005">
    </testcase>
    <testcase classname="CartItemController &gt; assignCart" name="should throw if cart item not found" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="OrderItemController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:29" time="13.972" tests="15">
    <testcase classname="OrderItemController" name="should be defined" time="0.05">
    </testcase>
    <testcase classname="OrderItemController &gt; create" name="should create an order item" time="0.009">
    </testcase>
    <testcase classname="OrderItemController &gt; findAll" name="should return an array of order items" time="0.007">
    </testcase>
    <testcase classname="OrderItemController &gt; findOne" name="should return an order item" time="0.005">
    </testcase>
    <testcase classname="OrderItemController &gt; findOne" name="should throw if order item not found" time="0.03">
    </testcase>
    <testcase classname="OrderItemController &gt; update" name="should update an order item" time="0.007">
    </testcase>
    <testcase classname="OrderItemController &gt; update" name="should throw if order item not found" time="0.009">
    </testcase>
    <testcase classname="OrderItemController &gt; remove" name="should remove an order item" time="0.007">
    </testcase>
    <testcase classname="OrderItemController &gt; remove" name="should throw if order item not found" time="0.008">
    </testcase>
    <testcase classname="OrderItemController &gt; assignCandle" name="should assign a candle to an order item" time="0.006">
    </testcase>
    <testcase classname="OrderItemController &gt; assignCandle" name="should throw if order item not found" time="0.005">
    </testcase>
    <testcase classname="OrderItemController &gt; assignGift" name="should assign a gift to an order item" time="0.004">
    </testcase>
    <testcase classname="OrderItemController &gt; assignGift" name="should throw if order item not found" time="0.005">
    </testcase>
    <testcase classname="OrderItemController &gt; assignOrder" name="should assign an order to an order item" time="0.006">
    </testcase>
    <testcase classname="OrderItemController &gt; assignOrder" name="should throw if order item not found" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ContainersController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.083" tests="6">
    <testcase classname="ContainersController" name="should be defined" time="0.011">
    </testcase>
    <testcase classname="ContainersController &gt; findAll" name="should return an array of containers" time="0.004">
    </testcase>
    <testcase classname="ContainersController &gt; findOne" name="should return a container" time="0.004">
    </testcase>
    <testcase classname="ContainersController &gt; create" name="should create a container" time="0.004">
    </testcase>
    <testcase classname="ContainersController &gt; update" name="should update a container" time="0.004">
    </testcase>
    <testcase classname="ContainersController &gt; remove" name="should remove a container" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="PlacesService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="0.972" tests="11">
    <testcase classname="PlacesService" name="should be defined" time="0.01">
    </testcase>
    <testcase classname="PlacesService" name="should create a place" time="0.005">
    </testcase>
    <testcase classname="PlacesService" name="should throw if save fails" time="0.035">
    </testcase>
    <testcase classname="PlacesService" name="should return all places" time="0.002">
    </testcase>
    <testcase classname="PlacesService" name="should throw if no places are found" time="0.007">
    </testcase>
    <testcase classname="PlacesService" name="should return one place" time="0.006">
    </testcase>
    <testcase classname="PlacesService" name="should throw if place not found" time="0.004">
    </testcase>
    <testcase classname="PlacesService" name="should update a place" time="0.003">
    </testcase>
    <testcase classname="PlacesService" name="should throw if updating non-existing place" time="0.006">
    </testcase>
    <testcase classname="PlacesService" name="should remove a place" time="0.003">
    </testcase>
    <testcase classname="PlacesService" name="should throw if removing non-existing place" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="CandlesController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.056" tests="6">
    <testcase classname="CandlesController" name="should be defined" time="0.014">
    </testcase>
    <testcase classname="CandlesController &gt; findAll" name="should return an array of candles" time="0.005">
    </testcase>
    <testcase classname="CandlesController &gt; findOne" name="should return a candle" time="0.003">
    </testcase>
    <testcase classname="CandlesController &gt; create" name="should create a candle" time="0.004">
    </testcase>
    <testcase classname="CandlesController &gt; update" name="should update a candle" time="0.004">
    </testcase>
    <testcase classname="CandlesController &gt; remove" name="should remove a candle" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="AiService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.021" tests="8">
    <testcase classname="AiService &gt; generateText" name="should return text from Gemini API" time="0.01">
    </testcase>
    <testcase classname="AiService &gt; generateText" name="should throw specific error message if API responds with error" time="0.037">
    </testcase>
    <testcase classname="AiService &gt; generateText" name="should throw default message if no error detail is returned" time="0.004">
    </testcase>
    <testcase classname="AiService &gt; generateText" name="should throw internal error if no response is returned" time="0.006">
    </testcase>
    <testcase classname="AiService &gt; generateImage" name="should return image URL from API" time="0.003">
    </testcase>
    <testcase classname="AiService &gt; generateImage" name="should throw 400 BadRequestException" time="0.003">
    </testcase>
    <testcase classname="AiService &gt; generateImage" name="should throw InternalServerErrorException when no image returned" time="0.01">
    </testcase>
    <testcase classname="AiService &gt; generateImage" name="should throw ServiceUnavailable if no response" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AromasController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.042" tests="6">
    <testcase classname="AromasController" name="should be defined" time="0.013">
    </testcase>
    <testcase classname="AromasController &gt; findAll" name="should return an array of aromas" time="0.004">
    </testcase>
    <testcase classname="AromasController &gt; findOne" name="should return an aroma" time="0.003">
    </testcase>
    <testcase classname="AromasController &gt; create" name="should create an aroma" time="0.003">
    </testcase>
    <testcase classname="AromasController &gt; update" name="should update an aroma" time="0.004">
    </testcase>
    <testcase classname="AromasController &gt; remove" name="should remove an aroma" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AppController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:43" time="0.447" tests="1">
    <testcase classname="AppController &gt; root" name="should return &quot;Backend is running in NestJS!&quot;" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="ContainersService" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:43" time="0.819" tests="9">
    <testcase classname="ContainersService" name="should be defined" time="0.006">
    </testcase>
    <testcase classname="ContainersService &gt; create" name="should create a container" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; findAll" name="should return an array of containers" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; findOne" name="should return a container" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; findOne" name="should throw NotFoundException if container not found" time="0.014">
    </testcase>
    <testcase classname="ContainersService &gt; update" name="should update a container" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; update" name="should throw NotFoundException if container not found" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; remove" name="should remove a container" time="0.003">
    </testcase>
    <testcase classname="ContainersService &gt; remove" name="should throw NotFoundException if container not found" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="GiftsController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.67" tests="6">
    <testcase classname="GiftsController" name="should be defined" time="0.012">
    </testcase>
    <testcase classname="GiftsController &gt; findAll" name="should return an array of gifts" time="0.003">
    </testcase>
    <testcase classname="GiftsController &gt; findOne" name="should return a gift" time="0.002">
    </testcase>
    <testcase classname="GiftsController &gt; create" name="should create a gift" time="0.003">
    </testcase>
    <testcase classname="GiftsController &gt; update" name="should update a gift" time="0.003">
    </testcase>
    <testcase classname="GiftsController &gt; remove" name="should remove a gift" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="PlacesController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.605" tests="7">
    <testcase classname="PlacesController" name="should be defined" time="0.01">
    </testcase>
    <testcase classname="PlacesController &gt; create" name="should create a place" time="0.003">
    </testcase>
    <testcase classname="PlacesController &gt; findAll" name="should return all places" time="0.003">
    </testcase>
    <testcase classname="PlacesController &gt; findOne" name="should return a place by id" time="0.002">
    </testcase>
    <testcase classname="PlacesController &gt; findOne" name="should throw NotFoundException if place not found" time="0.01">
    </testcase>
    <testcase classname="PlacesController &gt; update" name="should update a place" time="0.003">
    </testcase>
    <testcase classname="PlacesController &gt; remove" name="should remove a place" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="IntendedImpactController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.618" tests="6">
    <testcase classname="IntendedImpactController" name="should be defined" time="0.008">
    </testcase>
    <testcase classname="IntendedImpactController" name="should create an intended impact" time="0.002">
    </testcase>
    <testcase classname="IntendedImpactController" name="should return all intended impacts" time="0.001">
    </testcase>
    <testcase classname="IntendedImpactController" name="should return one intended impact by id" time="0.003">
    </testcase>
    <testcase classname="IntendedImpactController" name="should update an intended impact" time="0.002">
    </testcase>
    <testcase classname="IntendedImpactController" name="should delete an intended impact" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AuthController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.941" tests="3">
    <testcase classname="AuthController" name="should be defined" time="0.01">
    </testcase>
    <testcase classname="AuthController &gt; createUser" name="should create a new user" time="0.003">
    </testcase>
    <testcase classname="AuthController &gt; loginUser" name="should login user with valid credentials" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="MainOptionsController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.532" tests="6">
    <testcase classname="MainOptionsController" name="should be defined" time="0.008">
    </testcase>
    <testcase classname="MainOptionsController" name="should create a main option" time="0.003">
    </testcase>
    <testcase classname="MainOptionsController" name="should return all main options" time="0.004">
    </testcase>
    <testcase classname="MainOptionsController" name="should return a single main option by id" time="0.004">
    </testcase>
    <testcase classname="MainOptionsController" name="should update a main option" time="0.003">
    </testcase>
    <testcase classname="MainOptionsController" name="should delete a main option" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="OrdersController" errors="0" failures="0" skipped="0" timestamp="2025-05-12T08:11:42" time="1.531" tests="7">
    <testcase classname="OrdersController" name="should be defined" time="0.006">
    </testcase>
    <testcase classname="OrdersController &gt; findAll" name="should return all orders" time="0.006">
    </testcase>
    <testcase classname="OrdersController &gt; findOne" name="should return a single order" time="0.002">
    </testcase>
    <testcase classname="OrdersController &gt; update" name="should update an order" time="0.003">
    </testcase>
    <testcase classname="OrdersController &gt; remove" name="should delete an order" time="0.003">
    </testcase>
    <testcase classname="OrdersController &gt; updateStatus" name="should update the status of an order" time="0.003">
    </testcase>
    <testcase classname="OrdersController &gt; processPayment" name="should process payment for an order" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="CartController" errors="0" failures="1" skipped="0" timestamp="2025-05-12T08:11:42" time="3.364" tests="8">
    <testcase classname="CartController" name="should be defined" time="0.012">
    </testcase>
    <testcase classname="CartController" name="should call service.create on create" time="0.003">
    </testcase>
    <testcase classname="CartController" name="should call service.findOne on findOne" time="0.005">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: &quot;cart2&quot;
Received: &quot;cart1&quot;

Number of calls: 1
    at Object.&lt;anonymous&gt; (C:\Universidad\Semestre VII\Compunet III\a\project-backend-aromalife-adn\test\unitTest\cart\cart.controller.spec.ts:48:29)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="CartController" name="should call service.update on update" time="0.002">
    </testcase>
    <testcase classname="CartController" name="should call service.remove on remove" time="0.002">
    </testcase>
    <testcase classname="CartController" name="should call service.addItem on addItem" time="0.003">
    </testcase>
    <testcase classname="CartController" name="should call service.updateItem on updateItem" time="0.003">
    </testcase>
    <testcase classname="CartController" name="should call service.removeItem on removeItem" time="0.002">
    </testcase>
  </testsuite>
</testsuites>